# -*- coding: utf-8 -*-
"""Object_composition_over_Inheritance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QUUzAoRpHUE7fZL_B-oy-Naezz8Ngsao
"""

from abc import ABC, abstractmethod


class FlyBehavior(ABC):
    @abstractmethod
    def fly(self):
        pass


class FastFly(FlyBehavior):
    def fly(self):
        print("Flying fast!")

class SlowFly(FlyBehavior):
    def fly(self):
        print("Flying slow...")


class Bird:
    def __init__(self, fly_behavior: FlyBehavior):
        self.fly_behavior = fly_behavior


    def perform_fly(self):
        self.fly_behavior.fly()


    def set_fly_behavior(self, fly_behavior: FlyBehavior):
        self.fly_behavior = fly_behavior




my_bird = Bird(FastFly())
my_bird.perform_fly()  # Outputs: Flying fast!

    # Change the Bird's fly behavior to SlowFly at runtime
my_bird.set_fly_behavior(SlowFly())
my_bird.perform_fly()  # Outputs: Flying slow...

my_bird = Bird(SlowFly())
my_bird.perform_fly()