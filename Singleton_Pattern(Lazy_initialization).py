# -*- coding: utf-8 -*-
"""Singleton_Pattern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QUUzAoRpHUE7fZL_B-oy-Naezz8Ngsao
"""

import threading

class PrinterSpooler:
    _instance = None
    _lock = threading.Lock()

    def __new__(cls):
        if cls._instance == None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super(PrinterSpooler, cls).__new__(cls)
        return cls._instance

    def print_job(self, document):
        print(f"Printing: {document}")

class User:
    def __init__(self, name):
        self.name = name

    def send_print_job(self, document):
        spooler = PrinterSpooler()
        print(f"{self.name} is sending a print job.")
        spooler.print_job(document)


user1 = User("Alice")
user2 = User("Bob")
                                               #//Outputs
user1.send_print_job("Document1.pdf")          #Alice is sending a print job.
user2.send_print_job("Document2.pdf")          #Printing: Document1.pdf
                                               #Bob is sending a print job.
                                               #Printing: Document2.pdf